Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?

Ans:  The main columns in a explain result are 
      id :- a sequential identifier for each SELECT within the query (in case of nested subqueries).

      select_type :– the type of SELECT query. Possible values are:
        SIMPLE – the query is a simple SELECT query without any subqueries or UNIONs
        PRIMARY – the SELECT is in the outermost query in a JOIN
        DERIVED – the SELECT is part of a subquery within a FROM clause
        SUBQUERY – the first SELECT in a subquery
        DEPENDENT SUBQUERY – a subquery which is dependent upon on outer query
        UNCACHEABLE SUBQUERY – a subquery which is not cacheable (there are certain conditions for a query to be cacheable)
        UNION – the SELECT is the second or later statement of a UNION
        DEPENDENT UNION – the second or later SELECT of a UNION is dependent on an outer query
        UNION RESULT – the SELECT is a result of a UNION

      table :– the table referred to by the row

      type :– how MySQL joins the tables used. This is one of the most insightful fields in the output because it can indicate missing indexes or how the query is written should be reconsidered. Possible values are:
        SYSTEM – the table has only zero or one row
        CONST – the table has only one matching row which is indexed. This is the fastest type of join because the table only has to be read once and the column’s value can be treated as a constant when joining other tables.
        EQ_REF – all parts of an index are used by the join and the index is PRIMARY KEY or UNIQUE NOT NULL. This is the next best possible join type.
        REF – all of the matching rows of an indexed column are read for each combination of rows from the previous table. This type of join appears for indexed columns compared using = or <=> operators.
        FULLTEXT – the join uses the table’s FULLTEXT index.
        REF_OR_NULL – this is the same as ref but also contains rows with a null value for the column.
        IINDEX_MERGE – the join uses a list of indexes to produce the result set. The key column of EXPLAIN‘s output will contain the keys used.
        UNIQUE_SUBQUERY – an IN subquery returns only one result from the table and makes use of the primary key.
        INDEX_SUBQUERY – the same as unique_subquery but returns more than one result row.
        RANGE – an index is used to find matching rows in a specific range, typically when the key column is compared to a constant using operators like BETWEEN, IN, >, >=, etc.
        INDEX – the entire index tree is scanned to find matching rows.
        ALL – the entire table is scanned to find matching rows for the join. This is the worst join type and usually indicates the lack of appropriate indexes on the table.

        possible_keys :– shows the keys that can be used by MySQL to find rows from the table, though they may or may not be used in practice. In fact, this column can often help in optimizing queries since if the column is NULL, it indicates no relevant indexes could be found.

        key :– indicates the actual index used by MySQL. This column may contain an index that is not listed in the possible_key column. MySQL optimizer always look for an optimal key that can be used for the query. While joining many tables, it may figure out some other keys which is not listed in possible_key but are more optimal.

        key_len :– indicates the length of the index the Query Optimizer chose to use. For example, a key_len value of 4 means it requires memory to store four characters. Check out MySQL’s data type storage requirements to know more about this.

        ref – Shows the columns or constants that are compared to the index named in the key column. MySQL will either pick a constant value to be compared or a column itself based on the query execution plan. You can see this in the example given below.

        rows – lists the number of records that were examined to produce the output. This Is another important column worth focusing on optimizing queries, especially for queries that use JOIN and subqueries.

        Extra – contains additional information regarding the query execution plan. Values such as “Using temporary”, “Using filesort”, etc. in this column may indicate a troublesome query.



Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?

2.2 Is the SELECT query optimal? If no, how do we optimize it?


Ans 2.1: It means that when we are searching the comments table for user_id = 41, it traverses all the rows of that relation in search of that particular id. This might take a long time if the table is large.

Ans 2.2: This SELECT query is not optimal. We can optimise it by adding a index to the id column by using this command:
        CREATE INDEX comments_id_index on comments(id);




Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows    | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE      | ALL  | NULL| NULL    | NULL| 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order? Ask the exercise creator for a hint if you are confused.


Ans: We should create a composite index on commentable_id, user_id and commentable type in this order only (assuming total no. of users is less than total no. of comments).  The comaand for this will be:
     CREATE INDEX comments_commentable_id_user_id_commentable_type_index on comments(commentable_id, user_id, commentable_type);



Q4:
4.1: EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?

Ans: EXPLAIN SELECT articles.content
     FROM articles
     INNER JOIN users ON (users.id = articles.user_id)
     WHERE users.name = 'User3';

+----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra                                              |
+----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+
|  1 | SIMPLE      | articles | ALL  | NULL          | NULL | NULL    | NULL |    4 | NULL                                               |
|  1 | SIMPLE      | users    | ALL  | PRIMARY       | NULL | NULL    | NULL |    4 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+
2 rows in set (0.00 sec)

    We get two rows. One for each table in the join operation.
    The fields have their usual meaning as explained above exept the last one.
    The 'Extra' field for second row show 'Using where, Using join buffer' which means that the second table is being used in the join buffer to be joined to 1st table.


4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?

    EXPLAIN SELECT articles.content
    FROM articles
    where user_id in (
    SELECT id FROM users WHERE name = 'User3'
    );

    +----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra                                              |
+----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+
|  1 | SIMPLE      | articles | ALL  | NULL          | NULL | NULL    | NULL |    4 | NULL                                               |
|  1 | SIMPLE      | users    | ALL  | PRIMARY       | NULL | NULL    | NULL |    4 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+----------+------+---------------+------+---------+------+------+----------------------------------------------------+

    Both the explains are same. Therefore, both are equally good.